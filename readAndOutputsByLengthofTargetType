#include <string>
#include <algorithm>
#include <vector>
#include <iostream>
#include <exception>
#include <type_traits>

#bigEndian

template<typename TargetType>
[[nodiscard]] TargetType MergeByTargetType(const void* src, unsigned int targetTypeLen = sizeof(TargetType)) {
    if (!(is_trivial<TargetType>::value))
        throw invalid_argument("argument is not a trivial type");

    TargetType val;

    memcpy(&val, src, targetTypeLen);
    
    return val;
}

template<typename TargetType, typename T>
[[nodiscard]] TargetType MergeByTargetType(const vector<T>& src, unsigned int offset = 0, unsigned int targetTypeLen = sizeof(TargetType)) {
    if (!(is_trivial<TargetType>::value)) 
        throw invalid_argument("argument is not a trivial type");
    
    TargetType val;

    if (targetTypeLen <= (src.size() - offset) * sizeof(T))
        memcpy(&val, &(*(src.cbegin() + offset)), targetTypeLen);
    else
        throw out_of_range("An attempt was made to read more values ​​than were stored in the container");

    return val;
}
